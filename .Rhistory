install.packages("golem")
install.packages("golem")
package_version("golem")
package_version(golem)
library(golem)
packag_version("golem")
package_version("golem")
package_version(golem)
packageVersion("golem")
golem::create_golem()
create_golem(path = here::here())
golem::create_golem(path = here::here())
library(golem)
create_golem(path = here::here())
create_golem(path = here::here(), overwrite = TRUE)
library(bslib)
source("~/bslibShowcase/dev/02_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...
) {
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
run_app()
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
# Sass code compilation
sass::sass(input = sass::sass_file("inst/app/www/custom.sass"), output = "inst/app/www/custom.css", cache = NULL)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Document and reload your package
golem::document_and_reload()
# Document and reload your package
golem::document_and_reload()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
bslibShowcase::run_app()
# Run the application
golem::run_app()
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...
) {
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
run_app()
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...
) {
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
library(golem)
source("~/bslibShowcase/R/run_app.R", echo=TRUE)
library(shiny)
run_app()
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/R/run_app.R", echo=TRUE)
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...
) {
golem::with_golem_options(
app = shiny::shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
run_app()
library(bslibShowcase)
run_app()
bslibShowcase::run_app()
run_app()
source("~/bslibShowcase/R/run_app.R", echo=TRUE)
source("~/bslibShowcase/R/app_ui.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
# Run the application
bslibShowcase::run_app()
library(bslibShowcase)
run_app()
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
rm(list = c("run_app"))
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
library(bslib)
library(shiny)
library(crosstalk)
library(plotly)
# For creating the "filter" between the controls and plots
dat <- SharedData$new(dplyr::sample_n(diamonds, 1000))
# Sidebar elements (e.g., filter controls)
cut <- filter_select("cut", "Cut", dat, ~cut)
clarity <- filter_select("clarity", "Clarity", dat, ~clarity)
color <- filter_select("color", "Color", dat, ~color)
# Main elements (e.g., plots)
plot_price <- plot_ly(dat, x = ~price)
plot_carat <- plot_ly(dat, x = ~carat)
plot_depth <- plot_ly(dat, x = ~depth)
shinyApp(
page_navbar(
title = "Dynamic sidebar",
sidebar = sidebar(
cut, clarity,
conditionalPanel(
"input.nav === 'Page 2'",
color
)
),
id = "nav",
nav("Page 1", plot_price, plot_carat),
nav("Page 2", plot_depth)
),
function(input, output) {}
)
packageVersion("bslib")
?sidebar()
??sidebar()
bslib::versions()
versions()
navbar_layout()
layout_sidebar()
?layout_sidebar()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
remotes::install_github("rstudio/bslib")
bslib::sidebar()
packageVersion("bslib")
remotes::install_github("rstudio/bslib")
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
htmltools::parseCssColors("forestgreen")
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
?thematic_shiny()
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
bslib::bs_get_variables("bg")
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
bslib::page_navbar(sidebar = "H")
bslib::page_navbar(sidebar = NULL)
bslib::page_navbar(sidebar = sidebar())
??sidebar()
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
?sidebarPanel()
bs_append(title = "Paul McCartney", content = "Bass guitar, vocals"
bs_accordion(id = "meet_the_beatles") %>%
bs_set_opts(panel_type = "success", use_heading_link = TRUE) %>%
bs_append(title = "John Lennon", content = "Rhythm guitar, vocals") %>%
bs_set_opts(panel_type = "info") %>%
bs_append(title = "Paul McCartney", content = "Bass guitar, vocals")
library(magrittr)
bs_accordion(id = "meet_the_beatles") %>%
bs_set_opts(panel_type = "success", use_heading_link = TRUE) %>%
bs_append(title = "John Lennon", content = "Rhythm guitar, vocals") %>%
bs_set_opts(panel_type = "info") %>%
bs_append(title = "Paul McCartney", content = "Bass guitar, vocals")
library(bsplus)
install.packages("bsplus")
bs_accordion(id = "meet_the_beatles") %>%
bs_set_opts(panel_type = "success", use_heading_link = TRUE) %>%
bs_append(title = "John Lennon", content = "Rhythm guitar, vocals") %>%
bs_set_opts(panel_type = "info") %>%
bs_append(title = "Paul McCartney", content = "Bass guitar, vocals")
library(bsplus)
bs_accordion(id = "meet_the_beatles") %>%
bs_set_opts(panel_type = "success", use_heading_link = TRUE) %>%
bs_append(title = "John Lennon", content = "Rhythm guitar, vocals") %>%
bs_set_opts(panel_type = "info") %>%
bs_append(title = "Paul McCartney", content = "Bass guitar, vocals")
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", encoding = 'UTF-8', echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
packageVersion("bslib")
library(shiny)
library(bslib)
library(ggplot2)
ui <- page_navbar(
nav(
"Plot",
plotOutput("gg")
),
sidebar = sidebar(
numericInput("test", "Test", value = 5)
)
)
server <- function(input, output, session) {
output[["gg"]] <- renderPlot({
ggplot(
iris, aes(x = Sepal.Length, y = Sepal.Width)
) + geom_point()
})
}
shinyApp(ui, server)
library(shiny)
library(bslib)
library(ggplot2)
ui <- page_navbar(
nav(
"Plot",
plotOutput("gg")
),
sidebar = sidebar(
numericInput("test", "Test", value = 5)
)
)
server <- function(input, output, session) {
output[["gg"]] <- renderPlot({
ggplot(
iris, aes(x = Sepal.Length, y = Sepal.Width)
) + geom_point()
})
}
shinyApp(ui, server)
ui <- page_navbar(
nav(
"Plot",
plotOutput("gg")
),
sidebar = sidebar(
numericInput("test", "Test", value = 5)
)
)
remotes::install_github("rstudio/bslib")
remotes::install_github("rstudio/bslib")
library(bslib)
library(shiny)
library(ggplot2)
library(shiny)
ui <- page_navbar(
nav(
"Plot",
plotOutput("gg")
),
sidebar = sidebar(
numericInput("test", "Test", value = 5)
)
)
server <- function(input, output, session) {
output[["gg"]] <- renderPlot({
ggplot(
iris, aes(x = Sepal.Length, y = Sepal.Width)
) + geom_point()
})
}
shinyApp(ui, server)
packageVersion("shiny")
install.packages("shiny")
library(shiny)
install.packages(c("alphavantager", "blob", "broom", "car", "cli", "commonmark", "crosstable", "dbplyr", "dplyr", "dtplyr", "flextable", "gdtools", "ggfittext", "ggmap", "ggplot2", "googledrive", "googlesheets4", "gt", "gtable", "hardhat", "hms", "htmltools", "htmlwidgets", "igraph", "lattice", "leaflet", "lme4", "markdown", "Matrix", "modelr", "officer", "parallelly", "pillar", "prodlim", "ps", "quantmod", "RcppArmadillo", "RCurl", "renv", "rlang", "rmarkdown", "RSQLite", "sf", "shinytest", "spelling", "survival", "testthat", "tibble", "tidyquant", "timetk", "vctrs", "wk", "xfun"))
install.packages(c("alphavantager", "blob", "broom", "car", "cli", "commonmark", "crosstable", "dbplyr", "dplyr", "dtplyr", "flextable", "gdtools", "ggfittext", "ggmap", "ggplot2", "googledrive", "googlesheets4", "gt", "gtable", "hardhat", "hms", "htmltools", "htmlwidgets", "igraph", "lattice", "leaflet", "lme4", "markdown", "Matrix", "modelr", "officer", "parallelly", "pillar", "prodlim", "ps", "quantmod", "RcppArmadillo", "RCurl", "renv", "rlang", "rmarkdown", "RSQLite", "sf", "shinytest", "spelling", "survival", "testthat", "tibble", "tidyquant", "timetk", "vctrs", "wk", "xfun"))
install.packages(c("alphavantager", "blob", "broom", "car", "cli", "commonmark", "crosstable", "dbplyr", "dplyr", "dtplyr", "flextable", "gdtools", "ggfittext", "ggmap", "ggplot2", "googledrive", "googlesheets4", "gt", "gtable", "hardhat", "hms", "htmltools", "htmlwidgets", "igraph", "lattice", "leaflet", "lme4", "markdown", "Matrix", "modelr", "officer", "parallelly", "pillar", "prodlim", "ps", "quantmod", "RcppArmadillo", "RCurl", "renv", "rlang", "rmarkdown", "RSQLite", "sf", "shinytest", "spelling", "survival", "testthat", "tibble", "tidyquant", "timetk", "vctrs", "wk", "xfun"))
renv::snapshot()
renv::status()
?sidebarPanel()
?nav()
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
attachment::att_amend_desc()
install.packages("withr")
attachment::att_amend_desc()
renv::install()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
remotes::install_github("rstudio/bslib")
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
library(attachment)
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
?sidebar()
packageVersion("bslib")
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
selectInput("cond_input",
label = "Conditional input",
choices = c("Choice1", "Choice2"))
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
source("~/bslibShowcase/dev/run_dev.R", echo=TRUE)
# Sass code compilation
sass::sass(input = sass::sass_file("inst/app/www/custom.scss"),
output = "inst/app/www/custom.css", cache = NULL)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
